
package GUI;

import FeatureExtraction.ColorFeatureExtraction;
import FeatureExtraction.ExtractImages;
import Index.ClusterReader;
import Index.ClusterWriter;
import Index.Index;
import Index.IndexWriter;


import clustering.Cluster;
import clustering.kMeans;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.SwingWorker;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import utils.Constants;
import utils.GraphicsUtilities;
import utils.ImageFileFilter;

/**
 *
 * @author test
 */
public class MainFrame extends javax.swing.JFrame {

    private JFileChooser folderChooser = new JFileChooser();
    private JFileChooser imageChooser = new JFileChooser();
    private long time;
    private int numIndex;
    private SwingWorker<String, Void> indexWorker;
    private SwingWorker<String, Void> cbirWorker;
    private ClusterReader clusterReader;
    progrssThread progressthread;

    /** Creates new form MainFrame */
    public MainFrame() {
        try {
            UIManager.setLookAndFeel("com.jtattoo.plaf.mcwin.McWinLookAndFeel");
            initComponents();
//            progressthread=new progrssThread(lblWait1);
//            new Thread(progressthread).start();
            try {
                clusterReader = new ClusterReader();
                clusterReader.readCluster();
            } catch (Exception e) {
            }
//            lblWait1.setVisible(false);

//            progressCBIR.setStringPainted(true);
//             progressCBIR.setIndeterminate(true);
            //Test
//            ThumbPanel thumbPanel=new ThumbPanel();
//            thumbPanel.setImage1(new File("is.gif"));
//            ThumbPanel thumbPanel2=new ThumbPanel();
//            thumbPanel2.setImage1(new File("is.gif"));
//            pnlImages.removeAll();
//            pnlImages.add(thumbPanel);
//            pnlImages.add(thumbPanel2);
//            pnlImages.repaint();
//            pnlImages.validate();

//            pnlImages.add(new testPanel());
//            pnlImages.add(new testPanel());
//            pnlImages.add(new testPanel());
//              pnlImages.add(new testPanel());
//            pnlImages.add(new testPanel());
//            pnlImages.add(new testPanel());
//              pnlImages.add(new testPanel());
//            pnlImages.add(new testPanel());
//            pnlImages.add(new testPanel());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        folderText = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        startIndexButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        indexProgress = new javax.swing.JProgressBar();
        jPanel5 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        clustIdComboBox = new javax.swing.JComboBox();
        btnViewData = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        pnlImages = new javax.swing.JPanel();
        searchCbir = new javax.swing.JProgressBar();
        jPanel1 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        txtFileName = new javax.swing.JTextField();
        pnlInputImg = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        cbirButton = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        pnlResultImages = new javax.swing.JPanel();
        progressCbir = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CBIR");

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 102, 255)), "Indexing Path"));

        jLabel1.setText("SELECT FOLDER OF IMAGES");

        jButton1.setText("BROWSE");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel6.setBackground(new java.awt.Color(0, 0, 0));

        startIndexButton.setText("START INDEXING");
        startIndexButton.setEnabled(false);
        startIndexButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startIndexButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(startIndexButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(startIndexButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(folderText, javax.swing.GroupLayout.PREFERRED_SIZE, 571, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 483, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(folderText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 102, 255)), "Progress Bar"));

        indexProgress.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(indexProgress, javax.swing.GroupLayout.PREFERRED_SIZE, 662, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(indexProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 102, 204)), "Cluster"));

        jLabel2.setText("SELECT CLUSTER");

        clustIdComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2" }));

        btnViewData.setText("VIEW DATA");
        btnViewData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewDataActionPerformed(evt);
            }
        });

        pnlImages.setAutoscrolls(true);
        pnlImages.setPreferredSize(new java.awt.Dimension(631, 15000));
        jScrollPane1.setViewportView(pnlImages);

        searchCbir.setBackground(new java.awt.Color(255, 255, 255));
        searchCbir.setFont(new java.awt.Font("Tahoma", 1, 11));
        searchCbir.setForeground(new java.awt.Color(51, 51, 255));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 667, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(clustIdComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnViewData, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(searchCbir, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(clustIdComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnViewData))
                    .addComponent(searchCbir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGap(8, 8, 8)))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Indexing", jPanel2);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "SELECT IMAGE", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 10), java.awt.Color.blue)); // NOI18N

        pnlInputImg.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlInputImg.setLayout(null);

        jButton2.setText("BROWSE");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        cbirButton.setText("APPLY CBIR");
        cbirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbirButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(pnlInputImg, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtFileName, javax.swing.GroupLayout.DEFAULT_SIZE, 523, Short.MAX_VALUE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cbirButton, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlInputImg, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(txtFileName, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbirButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48))
        );

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("ResultImage"));

        pnlResultImages.setAutoscrolls(true);
        pnlResultImages.setPreferredSize(new java.awt.Dimension(631, 15000));
        jScrollPane2.setViewportView(pnlResultImages);

        progressCbir.setBackground(new java.awt.Color(255, 255, 255));
        progressCbir.setFont(new java.awt.Font("Tahoma", 1, 11));
        progressCbir.setForeground(new java.awt.Color(51, 51, 255));

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progressCbir, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 667, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(11, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(progressCbir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("CBIR", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 729, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        folderChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        folderChooser.setDialogTitle("Open Index Folder ...");
        folderChooser.showDialog(this, "Open");
        File f = folderChooser.getSelectedFile();
        if (f == null) {
            startIndexButton.setEnabled(false);
//            numClusterCombo.setEnabled(false);
//            maxIterText.setEnabled(false);
            return;
        }
        folderText.setText(f.getAbsolutePath());
        startIndexButton.setEnabled(true);


        File[] files = f.listFiles(new ImageFileFilter(false));
        if (files.length == 0) {
            return;
        }


    }//GEN-LAST:event_jButton1ActionPerformed
    /**
     *   Method applyIndexing:
     * Steps 
     *   1) Form a Cluster Of given Datasets.
    Indexing is used to store each image file Attribute 
    e.g. avgRGBMEAN,FilePath Etc..
    2) Clusters Are Formed Using KMeans Clustering Algorithm
     * 
     */
    private void startIndexButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startIndexButtonActionPerformed
        // TODO add your handling code here:

        indexWorker = new SwingWorker<String, Void>() {

            String notes = "";

            protected String doInBackground() throws Exception {
                File folder = folderChooser.getSelectedFile();
                // image filter masih nge-bug
                File[] files = folder.listFiles(new ImageFileFilter(false));
                //System.out.println(files.length);
                if (!folder.isDirectory() || folder == null || files.length == 0) {
                    notes = "FAIL";
                    return notes;
                }
                indexProgress.setStringPainted(true);
                time = System.currentTimeMillis();
                IndexWriter indexWriter = new IndexWriter();
                List<Index> indexes = new ArrayList<Index>();
                //Feature Extraction

                numIndex = 1;
                for (File f : files) {
                    try {
                        BufferedImage bufferedImage = ImageIO.read(f);
                        if (bufferedImage.getHeight(null) != Constants.IMAGE_HEIGHT
                                || bufferedImage.getWidth(null) != Constants.IMAGE_WIDTH) {
                            bufferedImage = GraphicsUtilities.resizeImage(bufferedImage,
                                    Constants.IMAGE_WIDTH, Constants.IMAGE_HEIGHT);
                        }

                        Index index = indexWriter.getIndex(bufferedImage);
                        indexProgress.setValue(numIndex * 100 / files.length);
                        index.setFilePath(f.getAbsolutePath());
                        indexes.add(index);
                        numIndex++;
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    
                }

                // k-means clustering
                indexProgress.setIndeterminate(true);
                kMeans kmeans = new kMeans();

                List<Cluster> clusters = kmeans.formCluster(indexes);
                ClusterWriter clusterWriter = new ClusterWriter();
                clusterWriter.writeClusters(clusters);
                clusterReader.setCluster(clusters);
                notes = "SUCCESS";
                indexProgress.setIndeterminate(false);
                return notes;
            }

            protected void done() {
                indexProgress.setValue(0);
                if ("FAIL".equals(notes)) {
//                  indexingStatusLabel.setText("Can't Index images because path has no images");
//                  browsePanel.setVisible(false);
                    return;
                }

                int clustSize = clusterReader.getSize();

                Integer[] nums = new Integer[clustSize];
                for (int i = 0; i < clustSize; i++) {
                    nums[i] = i + 1;
                }
                clustIdComboBox.setModel(new DefaultComboBoxModel(nums));
            }
        };

        indexWorker.execute();

    }//GEN-LAST:event_startIndexButtonActionPerformed

    private void btnViewDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewDataActionPerformed
        // TODO add your handling code here:

//         ThumbPanel thumbPanel=new ThumbPanel();
//            thumbPanel.setImage1(new File("images4.jpeg"));
//             pnlImages.removeAll();
//            pnlImages.add(thumbPanel);
//            pnlImages.repaint();
//            pnlImages.validate();
        SwingWorker<String, Void> searchWorker = new SwingWorker<String, Void>() {

            @Override
            protected String doInBackground() throws Exception {
//                throw new UnsupportedOperationException("Not supported yet.");
                pnlImages.removeAll();
                pnlImages.repaint();
                pnlImages.validate();
                searchCbir.setIndeterminate(true);
                int index = Integer.parseInt(clustIdComboBox.getSelectedItem().toString().trim());
                Cluster cluster = clusterReader.getCluster(index);
                ThumbPanelRenderer renderer = new ThumbPanelRenderer();


                List<ThumbPanel> thumbPanles = renderer.getPanles(cluster);
                for (ThumbPanel pnl : thumbPanles) {
                    pnlImages.add(pnl);
                    pnlImages.repaint();
                    pnlImages.validate();

                }
                pnlImages.repaint();
                pnlImages.validate();
                searchCbir.setIndeterminate(false);
                return "";
            }
        };
        
         searchWorker.execute();




    }//GEN-LAST:event_btnViewDataActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        try {
            JFileChooser fileChooser = new JFileChooser("./");
            fileChooser.setFileFilter(new ImageFileFilter());
            int option = fileChooser.showOpenDialog(this);
            if (option == JFileChooser.APPROVE_OPTION) {
                File file = fileChooser.getSelectedFile();
                txtFileName.setText(file.getAbsolutePath());
                myPanel pnl = new myPanel(file, pnlInputImg.getWidth(), pnlInputImg.getHeight());
                pnlInputImg.removeAll();
                pnlInputImg.add(pnl);
                pnlInputImg.repaint();
                pnlInputImg.validate();
            }

        } catch (Exception e) {
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void cbirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbirButtonActionPerformed
        // TODO add your handling code here:
        try {

            String inputImg = txtFileName.getText().trim();
            if (inputImg.equals("")) {
                JOptionPane.showMessageDialog(this, "Select Proper Input Image!!!");
                return;
            }
            if (clusterReader.getSize() <= 0) {
                JOptionPane.showMessageDialog(this, "No index Found !! Start indexing first");
                return;
            }

//            progressCBIR.setIndeterminate(true);
//            progressthread.setFlag(true);
//            lblStatus.setText("WAIT.....");
//             lblWait1.setVisible(true);
            cbirWorker = new SwingWorker<String, Void>() {
                String notes = "";
                protected String doInBackground() throws Exception {
                    try {
                        cbirButton.setEnabled(false);
                        progressCbir.setIndeterminate(true);
                        String inputImg = txtFileName.getText().trim();
                        Map<Cluster, Double> clusterMap = new HashMap<Cluster, Double>();

                        ColorFeatureExtraction featureExtraction = new ColorFeatureExtraction();
                        featureExtraction.extractFeatures(ImageIO.read(new File(inputImg)));
                        Vector inputFeatures = featureExtraction.colFeatures;

                        //Select Best Match Cluster
                        for (Cluster cluster : clusterReader.getCluster()) {
                            Index index = cluster.getFirstIndex();
                            double diff = featureExtraction.compareFeatureVector(inputFeatures, index.getMeanRGB());
//             System.err.println(diff);    
                            clusterMap.put(cluster, diff);

                        }
                        System.out.println(" Before ----------");
                        printMap(clusterMap);
                        System.out.println(" After ----------");
                        ValueComparator bvc = new ValueComparator(clusterMap);
//            TreeMap<Cluster,Double> SortClusterMap=new TreeMap<Cluster, Double>(bvc);
                        Map<Cluster, Double> sortedMap = sortByValue(clusterMap);
                        printMap(sortedMap);

                        System.out.println(sortedMap.keySet());
                        List<Cluster> clusters = new ArrayList<Cluster>();
                        int cnter = 0;
                        for (Cluster c : sortedMap.keySet()) {
                            if (cnter == 5) {
                                break;
                            }
                            clusters.add(c);
                            cnter++;

                        }


                        ExtractImages exImg = new ExtractImages();

//            Cluster cluster=(Cluster)sortedMap.values().toArray()[0];
//            
//            
//            
                        //======================================================
                        ThumbPanelRenderer renderer = new ThumbPanelRenderer();
                        pnlResultImages.removeAll();

                        List<ThumbPanel> thumbPanles = renderer.getPanles(exImg.getBufferedImage(inputFeatures, clusters));
                        for (ThumbPanel pnl : thumbPanles) {
                            pnlResultImages.add(pnl);
                            pnlResultImages.repaint();
                            pnlResultImages.validate();

                        }
                        pnlResultImages.repaint();
                        pnlResultImages.validate();

                    } catch (Exception e) {
                        notes="FAIL";
                        return notes;
                    }
                    notes="SUCSESS";
                    return notes;
                }
                
                public void done()
                {
                    progressCbir.setIndeterminate(false);
                    cbirButton.setEnabled(true);
                 if("FAIL".equals(notes))
                 {
                  JOptionPane.showMessageDialog(null, "ERROR!! In CBIR PROCESING");
                  return;
                 }
                }
                
            };
           cbirWorker.execute(); 

//            Map<Cluster,Double> clusterMap=new HashMap<Cluster, Double>();
//            
//            ColorFeatureExtraction featureExtraction=new ColorFeatureExtraction();
//            featureExtraction.extractFeatures(ImageIO.read(new File(inputImg)));
//            Vector inputFeatures=featureExtraction.colFeatures;
//            
//            //Select Best Match Cluster
//            for(Cluster cluster:clusterReader.getCluster())
//            {
//             Index index=cluster.getFirstIndex();
//             double diff=featureExtraction.compareFeatureVector(inputFeatures, index.getMeanRGB());
////             System.err.println(diff);    
//             clusterMap.put(cluster, diff);      
//         
//            }            
//            System.out.println(" Before ----------");
//             printMap(clusterMap);
//            System.out.println(" After ----------");
//            ValueComparator bvc=new ValueComparator(clusterMap);
////            TreeMap<Cluster,Double> SortClusterMap=new TreeMap<Cluster, Double>(bvc);
//            Map<Cluster,Double> sortedMap=sortByValue(clusterMap);
//            printMap(sortedMap);
//            
//           System.out.println(sortedMap.keySet());
//            List<Cluster> clusters = new ArrayList<Cluster>();
//            int cnter=0;
//            for (Cluster c : sortedMap.keySet()) {
//                if (cnter == 5) {
//                    break;
//                }
//                clusters.add(c);
//                cnter++;
//                
//            }
//            
//            
//            ExtractImages exImg=new ExtractImages();
//            
////            Cluster cluster=(Cluster)sortedMap.values().toArray()[0];
////            
////            
////            
//            //======================================================
//            ThumbPanelRenderer renderer=new ThumbPanelRenderer();
//         pnlResultImages.removeAll();
//
//        List<ThumbPanel> thumbPanles=renderer.getPanles(exImg.getBufferedImage(inputFeatures, clusters));
//        for(ThumbPanel pnl:thumbPanles)
//        {
//         pnlResultImages.add(pnl);
//        pnlResultImages.repaint();
//          pnlResultImages.validate();
//       
//        }
//          pnlResultImages.repaint();
//          pnlResultImages.validate();




        } catch (Exception e) {
            e.printStackTrace();
        }
//        lblStatus.setText("");
//         progressthread.setFlag(false);
//        lblWait1.setVisible(false);
    }//GEN-LAST:event_cbirButtonActionPerformed

    public static void printMap(Map<Cluster, Double> map) {
        for (Map.Entry entry : map.entrySet()) {
            System.out.println("Key : " + entry.getKey() + " Value : "
                    + entry.getValue());
        }
    }

    static Map sortByValue(Map map) {
        List list = new LinkedList(map.entrySet());
        Collections.sort(list, new Comparator() {

            public int compare(Object o1, Object o2) {
                return ((Comparable) ((Map.Entry) (o1)).getValue()).compareTo(((Map.Entry) (o2)).getValue());
            }
        });

        Map result = new LinkedHashMap();
        for (Iterator it = list.iterator(); it.hasNext();) {
            Map.Entry entry = (Map.Entry) it.next();
            result.put(entry.getKey(), entry.getValue());
        }
        return result;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    class ValueComparator implements Comparator<String> {

        Map<Cluster, Double> base;

        public ValueComparator(Map<Cluster, Double> base) {
            this.base = base;
        }

        // Note: this comparator imposes orderings that are inconsistent with equals.    
        public int compare(String a, String b) {
            if (base.get(a) >= base.get(b)) {
                return -1;
            } else {
                return 1;
            } // returning 0 would merge keys
        }
    }

    class progrssThread implements Runnable {

        boolean flag = false;
        public boolean endFlag = false;
        JLabel wait;

        public progrssThread(JLabel lblwait) {
            this.wait = lblwait;
        }

        public void setFlag(boolean flag) {
            this.flag = flag;
        }

        public void run() {
            while (!endFlag) {
//          progressCBIR.setIndeterminate(flag);
                System.out.println("" + flag);
                wait.setVisible(flag);
//          lblWait1.setText("test");
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnViewData;
    private javax.swing.JButton cbirButton;
    private javax.swing.JComboBox clustIdComboBox;
    private javax.swing.JTextField folderText;
    private javax.swing.JProgressBar indexProgress;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel pnlImages;
    private javax.swing.JPanel pnlInputImg;
    private javax.swing.JPanel pnlResultImages;
    private javax.swing.JProgressBar progressCbir;
    private javax.swing.JProgressBar searchCbir;
    private javax.swing.JButton startIndexButton;
    private javax.swing.JTextField txtFileName;
    // End of variables declaration//GEN-END:variables
}
